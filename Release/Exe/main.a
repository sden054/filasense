;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : filasense
;Version : 1.1
;Date    : 8/13/2021
;Author  : dennsk@gmail.com
;Company :
;Comments:
;
;
;Chip type               : ATtiny13A
;AVR Core Clock frequency: 1.200000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;*******************************************************/
;
;#include <tiny13a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;// Declare your global variables here
;#define inactivityTimeout 32+20 // 32: 7 seconds  (7/0.21845)
;#define BTN PINB.0
;#define SIG PINB.3
;#define PWR PORTB.1
;#define ALM PORTB.2
;
;volatile unsigned char inactivityTimer, running, lastState, trig, alarmset;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0025 	unsigned char currentState;
; 0000 0026 	// Place your code here
; 0000 0027 	inactivityTimer++;
;PCODE: $0000000C VOL: 0
;	currentState -> R16
;PCODE: $0000000D VOL: 1
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 1
; 0000 0028 	if(BTN==0){
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0029 		// button pressed
; 0000 002A 		trig=1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 1
; 0000 002B 	}else{
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002C 		if(trig){
;PCODE: $00000017 VOL: 1
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D       		// button released
; 0000 002E       		if(running || alarmset){ // if running or alarm set
;PCODE: $0000001A VOL: 1
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 1
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002F       			running=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 1
; 0000 0030       			PWR=0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0031       		}else{ // start from not running only (no alarm)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0032       			running=1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 1
; 0000 0033       			PWR=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0034       		}
;PCODE: $0000002C VOL: 0
; 0000 0035 			ALM=1; // reset alarm
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0036 			alarmset=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 1
; 0000 0037       		inactivityTimer=0; // reset timer
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 1
; 0000 0038             trig=0; //reset trigger
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 1
; 0000 0039       	}
; 0000 003A     }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003B     if(inactivityTimer>inactivityTimeout){ // timeout occured
;PCODE: $00000037 VOL: 1
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003C     	if(running){
;PCODE: $0000003A VOL: 1
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003D     		running=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 1
; 0000 003E     		PWR=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003F     		ALM=0; // set alarm
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0040     		alarmset=1;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 1
; 0000 0041     	}
; 0000 0042     	inactivityTimer=0; // reset timer
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 1
; 0000 0043     }else{
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0044     	// check filament motion (SIG-pin activity)
; 0000 0045     	currentState=SIG;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0046     	if(lastState!=currentState)inactivityTimer=0; // reset timer while state changed
;PCODE: $0000004D VOL: 1
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 1
; 0000 0047     	lastState=currentState; // save state for futher processing
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
;PCODE: $00000054 VOL: 0
; 0000 0048     }
;PCODE: $00000055 VOL: 0
; 0000 0049 
; 0000 004A }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;void main(void)
; 0000 004D {
;PCODE: $0000005A VOL: 0
; 0000 004E // Declare your local variables here
; 0000 004F 
; 0000 0050 // Input/Output Ports initialization
; 0000 0051 // Port B initialization
; 0000 0052 // Function: Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=In
; 0000 0053 DDRB=(0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0054 // State: Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=T
; 0000 0055 //PORTB=(0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
; 0000 0056 PORTB=(0<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0057 
; 0000 0058 // Timer/Counter 0 initialization
; 0000 0059 // Clock source: System Clock
; 0000 005A // Clock value: 1.172 kHz
; 0000 005B // Mode: Normal top=0xFF
; 0000 005C // OC0A output: Disconnected
; 0000 005D // OC0B output: Disconnected
; 0000 005E // Timer Period: 0.21845 s
; 0000 005F TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0060 TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0061 TCNT0=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0062 OCR0A=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0063 OCR0B=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0064 
; 0000 0065 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0066 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0067 
; 0000 0068 // Global enable interrupts
; 0000 0069 #asm("sei")
;PCODE: $0000006B VOL: 0
	sei
;PCODE: $0000006C VOL: 0
; 0000 006A /*
; 0000 006B while (1)
; 0000 006C       {
; 0000 006D       // Place your code here
; 0000 006E 
; 0000 006F       }
; 0000 0070       */
; 0000 0071 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;/*
;	avrdude -p attiny13 -b 9600 -c usbasp -v -v -U flash:w:filasense.hex -U lfuse:w:0x6a:m -U hfuse:w:0xff:m
;*/
